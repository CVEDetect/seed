-- Autogenerated: do not edit this file

CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键：作业实例编号，根据BATCH_JOB_SEQ自动生成',
	VERSION BIGINT                               COMMENT '版本号',
	JOB_NAME VARCHAR(100) NOT NULL               COMMENT '作业名称',
	JOB_KEY VARCHAR(32) NOT NULL                 COMMENT '作业标志：Job名和Job参数的Hash值，被使用来唯一标示一个Job实例',
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB COMMENT '作业实例表';

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键',
	VERSION BIGINT                                COMMENT '版本号',
	JOB_INSTANCE_ID BIGINT NOT NULL               COMMENT '作业实例ID',
	CREATE_TIME DATETIME NOT NULL                 COMMENT '作业执行器创建的时间',
	START_TIME DATETIME DEFAULT NULL              COMMENT '作业执行器开始执行的时间',
	END_TIME DATETIME DEFAULT NULL                COMMENT '作业执行器结束的时间，不管成功与否',
	STATUS VARCHAR(10)                            COMMENT '作业执行器执行的状态：COMPLETED、FAILED、STARTING、UNKNOW',
	EXIT_CODE VARCHAR(2500)                       COMMENT '作业执行器退出代码：UNKNOW、EXECUTING、COMPLETED',
	EXIT_MESSAGE VARCHAR(2500)                    COMMENT '作业执行器退出信息（通常存放异常信息）',
	LAST_UPDATED DATETIME                         COMMENT '本条记录上次更新时间',
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL COMMENT '作业配置文件的位置',
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB COMMENT '作业执行器表';

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL COMMENT '作业执行器ID',
	TYPE_CD VARCHAR(6) NOT NULL      COMMENT '参数类型：STRING、DATE、LONG、DOUBLE',
	KEY_NAME VARCHAR(100) NOT NULL   COMMENT '参数名（Job参数作为键值对被传递）',
	STRING_VAL VARCHAR(250)          COMMENT '参数如果是STRING，就存放STRING类型的参数值',
	DATE_VAL DATETIME DEFAULT NULL   COMMENT '参数如果是DATE，就存放DATE类型的参数值',
	LONG_VAL BIGINT                  COMMENT '参数如果是LONG，就存放LONG类型的参数值',
	DOUBLE_VAL DOUBLE PRECISION      COMMENT '参数如果是DOUBLE，就存放DOUBLE类型的参数值',
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT '作业参数表';

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键',
	VERSION BIGINT NOT NULL                        COMMENT '版本号',
	STEP_NAME VARCHAR(100) NOT NULL                COMMENT '作业步的名称（被配置在Job xml中的Step的名字）',
	JOB_EXECUTION_ID BIGINT NOT NULL               COMMENT '作业执行器ID',
	START_TIME DATETIME NOT NULL                   COMMENT '作业步执行器执行开始的时间',
	END_TIME DATETIME DEFAULT NULL                 COMMENT '作业步执行器执行结束的时间，无论成功与否',
	STATUS VARCHAR(10)                             COMMENT '作业步执行器执行的状态：COMPLETED、STARTING、STARTED、STOPPING、STOPPED、FAILED、ABANDONED、UNKNOWN（存在于org.springframework.batch.core.BatchStatus）',
	COMMIT_COUNT BIGINT                            COMMENT '事务提交次数',
	READ_COUNT BIGINT                              COMMENT '读数据次数',
	FILTER_COUNT BIGINT                            COMMENT '过滤掉的数据次数',
	WRITE_COUNT BIGINT                             COMMENT '写数据次数',
	READ_SKIP_COUNT BIGINT                         COMMENT '读数据跳过的次数',
	WRITE_SKIP_COUNT BIGINT                        COMMENT '写数据跳过的次数',
	PROCESS_SKIP_COUNT BIGINT                      COMMENT '处理数据跳过的次数',
	ROLLBACK_COUNT BIGINT                          COMMENT '事务回滚的次数',
	EXIT_CODE VARCHAR(2500)                        COMMENT '作业步执行器退出编码（存在于org.springframework.batch.core.ExitStauts）',
	EXIT_MESSAGE VARCHAR(2500)                     COMMENT '作业步执行器退出描述（一般是异常信息）',
	LAST_UPDATED DATETIME                          COMMENT '本条记录上次更新时间',
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT '作业步执行器';

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY COMMENT '作业步执行器ID',
	SHORT_CONTEXT VARCHAR(2500) NOT NULL          COMMENT '作业步执行器上下文字符串格式',
	SERIALIZED_CONTEXT TEXT                       COMMENT '序列化作业步执行器上下文（以便在将来重试的时候使用）',
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB COMMENT '作业步执行器上下文';

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY COMMENT '作业执行器ID',
	SHORT_CONTEXT VARCHAR(2500) NOT NULL         COMMENT '作业执行器上下文字符串格式',
	SERIALIZED_CONTEXT TEXT                      COMMENT '序列化的作业执行上下文（以便在将来重试的时候使用）',
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT '作业执行上下文表';

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB COMMENT '为作业步执行器提供主键生成';

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB COMMENT '为作业执行器提供主键生成';

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB COMMENT '为作业实例提供主键生成';

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);
