package com.dhe.infypower.demo.boot;

import com.dhe.infypower.demo.mina.ServerHandler;
import com.dhe.infypower.demo.mina.ServerProtocolCodecFactory;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.executor.ExecutorFilter;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.Resource;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.List;

@Configuration
public class MinaConfiguration {
    /*
    需引入这两个类
    <apache.mina.version>2.0.23</apache.mina.version>
    <mina-integration-spring.version>1.1.7</mina-integration-spring.version>
    <dependency>
        <groupId>org.apache.mina</groupId>
        <artifactId>mina-core</artifactId>
        <version>${apache.mina.version}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.mina</groupId>
        <artifactId>mina-integration-spring</artifactId>
        <version>${mina-integration-spring.version}</version>
    </dependency>
    */
    private final List<SocketAddress> socketAddresses = new ArrayList<SocketAddress>(){
        private static final long serialVersionUID = 4758571576380195245L;
        {
            add(new InetSocketAddress(8000));
            add(new InetSocketAddress(9000));
        }
    };                                                //监听地址
    private static final int bothIdleTime = 90;       //双向发呆时间(s)
    private static final int writeTimeout = 10000;    //写操作超时时间(ms)
    private static final boolean reuseAddress = true; //监听的端口是否可重用
    @Resource
    private ServerHandler serverHandler;
    @Resource
    private ServerProtocolCodecFactory serverProtocolCodecFactory;

    @Bean
    public NioSocketAcceptor nioSocketAcceptor() throws IOException {
        NioSocketAcceptor acceptor = new NioSocketAcceptor();
        //这里并未配置backlog，那么它会采用操作系统默认的连接请求队列长度50
        //详见org.apache.mina.core.polling.AbstractPollingIoAcceptor类源码的96行
        //acceptor.setBacklog(0);
        acceptor.setReuseAddress(reuseAddress);
        acceptor.getSessionConfig().setWriteTimeout(writeTimeout);
        acceptor.getSessionConfig().setBothIdleTime(bothIdleTime);
        //这里有个鱼和熊掌不可兼得的情景
        //若将codec定义在executor的前面，则codec由NioProcessor-1线程处理，IoHandler由pool-1-thread-1线程处理
        //若将codec定义在executor的后面，则codec和IoHandler都由pool-1-thread-1线程处理
        acceptor.getFilterChain().addLast("logger", new LoggingFilter());
        acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(serverProtocolCodecFactory));
        acceptor.getFilterChain().addLast("executor", new ExecutorFilter());
        //注意：无论如何executor都要定义在NioSocketConnector.setHandler()的前面
        acceptor.setHandler(serverHandler);
        // if(null==this.socketAddresses || this.socketAddresses.size()<1){
        //     throw new RuntimeException("监听SocketAddress数不得小于1");
        // }
        acceptor.bind(this.socketAddresses);
        if(acceptor.isActive()){
            System.out.println("写 超 时: " + writeTimeout + "ms");
            System.out.println("发呆配置: Both Idle " + bothIdleTime + "s");
            System.out.println("端口重用: " + reuseAddress);
            System.out.println("服务端初始化完成...");
            System.out.println("服务已启动...开始监听..." + acceptor.getLocalAddresses());
        }else{
            System.out.println("服务端初始化失败...");
        }
        return acceptor;
    }
}