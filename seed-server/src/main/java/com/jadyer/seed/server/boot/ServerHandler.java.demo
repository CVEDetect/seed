package com.dhe.infypower.demo.mina;

import com.dhe.infypower.demo.mina.component.BodyComponent102;
import com.dhe.infypower.demo.mina.component.BodyComponent104;
import com.dhe.infypower.demo.mina.component.BodyComponent106;
import com.dhe.infypower.demo.mina.component.BodyComponent4;
import com.dhe.infypower.demo.mina.model.Token;
import com.dhe.infypower.demo.util.InfyPowerUtil;
import com.dhe.infypower.demo.util.JadyerUtil;
import com.dhe.infypower.demo.util.LogUtil;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.Arrays;

/**
 * 业务分发类
 * <p>
 *     用于将收到的请求报文解码后的数据分发到具体的业务处理类
 * </p>
 * 起始域   aaf7
 * 长度域   0d00
 * 版本域   13
 * 序列号域 00
 * 命令代码 6900
 * 数据域   00000000
 * 校验和域 69
 * aaf70d00130069000000000069
 * Created by 玄玉<https://jadyer.cn/> on 2012/12/22 19:23.
 */
@Component
public class ServerHandler extends IoHandlerAdapter {
    @Resource
    private BodyComponent4 bodyComponent4;
    @Resource
    private BodyComponent102 bodyComponent102;
    @Resource
    private BodyComponent104 bodyComponent104;
    @Resource
    private BodyComponent106 bodyComponent106;

    @Override
    public void messageReceived(IoSession session, Object message) throws DecoderException {
        Token token = (Token)message;
        LogUtil.getLogger().info("供应商:"+token.getBusiType()+"  消息类型:"+token.getBusiCode()+"  完整报文(HEX):"+ JadyerUtil.buildHexStringWithASCII(token.getMessage()));
        StringBuilder sb = new StringBuilder();
        sb.append("\r\n------------------------------------------------------------------------------------------");
        sb.append("\r\n【通信双方】").append(session);
        sb.append("\r\n【收发标识】Receive");
        sb.append("\r\n【报文内容】").append(Hex.encodeHexString(token.getMessage()));
        sb.append("\r\n------------------------------------------------------------------------------------------");
        LogUtil.getLogger().info(sb.toString());

        // 解析收到的报文体
        switch (token.getBusiCode()) {
            case 4   : bodyComponent4.parseBody(token.getMessage()); break;
            case 102 : bodyComponent102.parseBody(token.getMessage()); break;
            case 104 : bodyComponent104.parseBody(token.getMessage()); break;
            case 106 : bodyComponent106.parseBody(token.getMessage()); break;
        }

        // 组装应答报文
        // byte[] respDatas = new byte[]{(byte)0xaa, (byte)0xf7, (byte)0x0f, 0x00, 0x13, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65};
        byte[] respDatas = new byte[]{(byte)0xaa, (byte)0xf7, (byte)0x0f, 0x00, 0x13, 0x00};
        if(token.getBusiCode() == 102){
            byte[] cmd = InfyPowerUtil.bigToSmall(101);
            respDatas = ArrayUtils.addAll(respDatas, cmd);
            respDatas = ArrayUtils.addAll(respDatas, new byte[]{0x00, 0x00, 0x00, 0x00});
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.bigToSmall(0));
            byte[] len = InfyPowerUtil.bigToSmall(respDatas.length+1);
            respDatas[2] = len[0];
            respDatas[3] = len[1];
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.sumCheck(Arrays.copyOfRange(respDatas, 6, respDatas.length), 8)[7]);
        }
        if(token.getBusiCode() == 104){
            byte[] cmd = InfyPowerUtil.bigToSmall(103);
            respDatas = ArrayUtils.addAll(respDatas, cmd);
            respDatas = ArrayUtils.addAll(respDatas, new byte[]{0x00, 0x00, 0x00, 0x00});
            respDatas = ArrayUtils.add(respDatas, (byte)0x01);
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.stringToAssic("CMD7001002003"));
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.bigToSmall(45));
            respDatas = ArrayUtils.add(respDatas, (byte)0x01);
            byte[] len = InfyPowerUtil.bigToSmall(respDatas.length+1);
            respDatas[2] = len[0];
            respDatas[3] = len[1];
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.sumCheck(Arrays.copyOfRange(respDatas, 6, respDatas.length), 8)[7]);
        }
        if(token.getBusiCode() == 106){
            byte[] cmd = InfyPowerUtil.bigToSmall(105);
            respDatas = ArrayUtils.addAll(respDatas, cmd);
            respDatas = ArrayUtils.addAll(respDatas, new byte[]{0x00, 0x00, 0x00, 0x00});
            byte[] len = InfyPowerUtil.bigToSmall(respDatas.length+1);
            respDatas[2] = len[0];
            respDatas[3] = len[1];
            respDatas = ArrayUtils.addAll(respDatas, InfyPowerUtil.sumCheck(Arrays.copyOfRange(respDatas, 6, respDatas.length), 8)[7]);
        }

        sb.setLength(0);
        sb.append("\r\n------------------------------------------------------------------------------------------");
        sb.append("\r\n【通信双方】").append(session);
        sb.append("\r\n【收发标识】Response");
        sb.append("\r\n【报文内容】").append(Hex.encodeHexString(respDatas));
        sb.append("\r\n------------------------------------------------------------------------------------------");
        LogUtil.getLogger().info(sb.toString());
        session.write(respDatas);
    }

    @Override
    public void messageSent(IoSession session, Object message) throws Exception {
        LogUtil.getLogger().info("已回应给Client...{}", session);
        if(session != null){
            //session.close(true);
            session.closeOnFlush();
        }
    }

    @Override
    public void sessionIdle(IoSession session, IdleStatus status){
        LogUtil.getLogger().info("请求进入闲置状态...回路即将关闭...");
        //session.close(true);
        session.closeNow();
    }

    @Override
    public void exceptionCaught(IoSession session, Throwable cause){
        LogUtil.getLogger().error("请求处理遇到异常...回路即将关闭...", cause);
        //session.close(true);
        session.closeOnFlush();
    }
}